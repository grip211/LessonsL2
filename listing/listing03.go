package main

/*
Что выведет программа? Объяснить вывод программы.
Объяснить внутреннее устройство интерфейсов и их отличие от пустых интерфейсов.
*/

import (
	"fmt"
	"os"
)

func Foo() error {
	var err *os.PathError = nil
	return err
}

func main() {
	err := Foo()
	fmt.Println(err)
	fmt.Println(err == nil)
}

/*
	Ответ:
		<nil>
		false

err не равен nil, так как у данного err указан тип - os.PathError.
Внутри интерфейс состоит из указателя на информацию о сохраненном типе и указателя на данные.
Отличие пустого интерфейса от обычного в том, что у пустого интерфейса нет методов.
*/

/*
интерфейс - это структура, в которой описаны методы,
	которые должны быть реализованы для других структур, которые будут удовлетворять этому интерфейсу.
	 Удовлетворение интерфейсу поддерживается на неявном уровне.
		То есть для объекта достаточно описать реализацию методов интерфейса.
			И объект, без дополнительных объявлений в кодовой базе, начинает удовлетворять этому интерфейсу.

Интерфейс реализован в go, как структура, которая содержит в себе ссылку на само значение и ссылку на структуру itab.
	itab предоставляет служебную информацию об интерфейсе и базовом типе.

Когда интерфейс nil значит, что интерфейс не ссылается на какое либо значение, но при этом содержит в себе служебную информацию поля itab.
 По этой причине булево сравнение nil с интерфейсом всегда ложное.

interface{}
	Исходя из определения интерфейса, пустой интерфейс - это интерфейс, для реализации которого не нужно описывать ни одного метода.
	Таким образом, пустому интерфейсу соответствует абсолютно любой тип.


*/
