package main

import (
	"fmt"
)

func main() {
	var s = []string{"1", "2", "3"} // len = 3, cap = 3
	modifySlice(s)
	fmt.Println(s)
}

func modifySlice(i []string) {
	i[0] = "3"         // изменяет массив, на который ссылается слайс
	i = append(i, "4") // Добавляет новый элемент, len>cap, поэтому выделяется память для нового массива и i ссылается на него
	i[1] = "5"         // Меняется элемент в новом массиве
	i = append(i, "6") // Добавляется элемент в новом массиве
	// i = [3, 5, 3, 4, 6]
}

/*
Ответ:

[3 2 3]

Будет выведен тот слайс, который определен в main, но с измененным нулевым элементом.
	Так как после изменения нулевого элемента в функции modifySlice
		происходит добавление еще одного элемента в конец слайса, происходит релокация,
			и слайсы s и i начинают указывать на разные массивы, следовательно,
				все последующие изменения в слайсе i не будут затрагивать значения в слайсе s.

При передаче слайса в качестве аргумента в функцию происходит копирование значений структуры,
	которая представляет собой слайс внутри, но так как слайс имеет по собой указатель на массив,
		то копируется именно указатель, а не сам массив. Как следствие,
			изменение элементов внутреннего слайса без его релокации или
				полного копирования повлияет на значения элементов внешнего слайса.
*/
